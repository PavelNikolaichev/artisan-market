import os
import random
import pandas as pd
from datetime import datetime, timedelta
from bson import ObjectId
import json

# AI generated review titles and contents - would probably not reflect the ratings generated by RNG.
titles = [
    "Amazing quality!",
    "Not as expected",
    "Would buy again",
    "Highly recommended",
    "Disappointing",
    "Great value",
    "Beautiful craftsmanship",
    "Just okay",
    "Exceeded expectations",
    "Perfect gift"
]

contents = [
    "Detailed review text...",
    "The product was well made and arrived quickly.",
    "I was hoping for better quality.",
    "Absolutely love it!",
    "Not worth the price.",
    "Very happy with my purchase.",
    "The seller was very responsive.",
    "Packaging could be improved.",
    "Looks even better in person.",
    "Would recommend to friends."
]

sample_comments = ["I agree!", "Thanks for the info.", "Helpful review.", "I had a different experience."]

# Random image URLs for reviews, provided by lorem picsum photos
image_urls = [
    "https://picsum.photos/200/300",
    "https://picsum.photos/300/200",
    "https://picsum.photos/250/250",
    "https://picsum.photos/210/310",
    "https://picsum.photos/310/210"
]

def random_date(start, end):
    """Generate a random datetime between `start` and `end`."""
    return start + timedelta(seconds=random.randint(0, int((end - start).total_seconds())))

class ReviewGenerator:

    def __init__(self):
        self.users = pd.read_csv(os.path.join("raw_data", "users.csv"))
        self.products = pd.read_csv(os.path.join("raw_data", "products.csv"))
        self.purchases = pd.read_csv(os.path.join("raw_data", "purchases.csv"))

    def generate_reviews(self, n_reviews=30):
        reviews = []

        for _, purchase in self.purchases.sample(n=min(n_reviews, len(self.purchases))).iterrows():
            user_id = purchase["user_id"]
            product_id = purchase["product_id"]
            purchase_date = pd.to_datetime(purchase["date"])
            created_at = random_date(purchase_date, datetime.now())
            review = {
                "_id": str(ObjectId()),
                "product_id": product_id,
                "user_id": user_id,
                "rating": random.randint(3, 5),
                "title": random.choice(titles),
                "content": random.choice(contents),
                "images": random.sample(image_urls, k=random.randint(0, 2)),
                "helpful_votes": random.randint(0, 20),
                "verified_purchase": True,
                "created_at": created_at.isoformat(),
                "comments": self.generate_comments(product_id, created_at)
            }
            reviews.append(review)

        return reviews

    def generate_comments(self, product_id, after_date):
        comments = []
        n_comments = random.choices([0, 1, 2], weights=[0.6, 0.3, 0.1])[0]

        for _ in range(n_comments):
            commenter = self.users.sample().iloc[0]
            comment = {
                "user_id": commenter["ID"],
                "content": random.choice(sample_comments),
                "created_at": random_date(after_date, datetime.now()).isoformat()
            }
            comments.append(comment)

        return comments

    def save_reviews(self, reviews, filename="reviews.json"):
        with open(os.path.join("raw_data", filename), "w", encoding="utf-8") as f:
            json.dump(reviews, f, indent=2)
        print(f"Saved {len(reviews)} reviews to {filename}")

if __name__ == "__main__":
    generator = ReviewGenerator()
    generated_reviews = generator.generate_reviews()
    generator.save_reviews(generated_reviews)
    print(f"Generated {len(generated_reviews)} reviews.")

